---
description: "Проектные правила и соглашения кода для чат-приложения (client/server)"
globs:
  - "**/*"
alwaysApply: true
---

## Общие принципы

- **TypeScript strict**: используем строгую типизацию, избегаем any. Экспортируемые API и публичные функции явно типизируем.
- **Единый стиль ответа API**: по возможности используем форму `{ success, data?, message?, error?, details? }`. Не ломаем существующие эндпоинты авторизации, которые возвращают `{ message, token, user }`.
- **Аутентификация**: токен хранится в `localStorage` по ключу `auth_token` и устанавливается только через `apiService`. Никогда не читаем/пишем токен напрямую вне `apiService`/`authStore`.
- **Переменные окружения**:
  - Client: `VITE_API_URL`, `VITE_SOCKET_URL` (дефолт: `/api` и текущий origin в dev).
  - Server: `PORT`, `CLIENT_URL`, `JWT_SECRET`, `USE_MOCK_DB`, `NODE_ENV`.
- **Пути/алиасы**: на клиенте используем алиас `@` на `src`. Импортируем из `@/services`, `@/store`, `@/types` и т.д.
- **Логирование**: в dev разрешены подробные логи с эмодзи-тегами; в production минимизируем. Не логируем секреты и токены.
- **Обработка ошибок**: на клиенте показываем `toast` сообщения пользователю; на сервере не раскрываем stack trace в production (детали только в dev).
- **Сокеты**: все socket-события должны быть документированы и иметь типы на клиенте в `SocketEvents`.
- **Безопасность**: все защищенные HTTP-роуты за `AuthMiddleware.verifyToken`; socket-аутентификация — через `auth.token` при подключении.

## Архитектура репозитория

- `client/` — Vite + React + Zustand + React Query + PWA.
- `server/` — Express + Socket.IO. В dev допускается `USE_MOCK_DB=true` для моков.

## Требования к новым фичам

- **HTTP**: новые серверные эндпоинты по умолчанию возвращают обертку `{ success, data }`. Если клиент ожидает «плоский» ответ (как в авторизации), явно согласовать/обновить клиент.
- **Socket**: имена событий в `snake_case`. Пэйлоады согласовать с интерфейсами из `@/types` и серверными DTO. При изменении update и клиент, и сервер.
- **Состояние**: новые хранилища делают `isLoading`, `error`, явные async-экшены, и при необходимости `persist` с аккуратным `partialize`.
- **UI/UX**: не блокируем критические действия из-за ошибок сокета; сетевые ошибки объясняем пользователю через `toast`.

## Качество кода

- Именование: говорящие названия, полные слова, без аббревиатур.
- Управление потоком: ранние выходы, обработка краевых случаев вначале, избегаем глубокой вложенности.
- Комментарии: только по сути «почему», не «что». Без лишних TODO — сразу реализуем.
- Форматирование: не переоформляем несвязанный код, соответствуем существующему стилю.
