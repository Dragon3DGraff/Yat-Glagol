---
description: "Сервер: Express/CORS/Auth/RateLimit/Socket.IO правила"
globs:
  - "server/**"
alwaysApply: true
---

## Express и middleware

- Загружать `dotenv.config()` как можно раньше.
- Безопасность: `helmet` включен; CSP не ослаблять без причины. CORS настраивать через `CLIENT_URL`.
- Rate limiting: общий лимитер включен; для auth и friends — отдельные лимитеры. В dev они мягче/пропущены.
- JSON body: лимиты разумные (`10mb`). Не принимать лишние поля — использовать валидаторы.

## Аутентификация

- Все защищенные роуты под `AuthMiddleware.verifyToken`.
- Маршруты:
  - `/api/auth` — публичные операции (login/register/refresh/forgot-password), но `logout`/`verify` — защищены.
  - `/api/chat`, `/api/user`, `/api/friends` — за `verifyToken`.
- Формат ответов: по возможности `{ success, data }`. Endpoints авторизации уже возвращают «плоский» ответ — сохраняем совместимость.

## Валидация

- Используем `express-validator` для `body/param/query` с явными сообщениями.
- При ошибках валидации: `400` и `{ error: "Ошибки валидации", details }`.

## Socket.IO

- Аутентификация сокета через middleware аутентификации с полем `auth.token`.
- Персональные комнаты пользователей — `user:{userId}`; комнатные — `room_{roomId}`.
- Имена событий — `snake_case`.
- На подключение: присоединять пользователя к персональной комнате и ко всем комнатам чата; транслировать статус `user_status_changed`.
- При отключении: если нет активных сокетов — ставим `offline` и транслируем статус.

## База данных

- В dev допускается `USE_MOCK_DB=true`. Стараться поддерживать методы мок- и реального менеджеров одинаковыми по сигнатурам.

## Ответы и ошибки

- В production не включать `details`/stack в ответы. В dev можно добавлять `details`.
- Никогда не возвращать сырые ошибки БД/стека, преобразовывать в понятные сообщения.

## Добавление новых фич и редактирование существующих

- При добавлении новых фич и редактировании существующий нужно следить чтобы в моках и в реальном коде они поддерживались идентичными.ю менять их нужно одновременно
