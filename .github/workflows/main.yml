name: Deploy to server

env:
  DEPLOY_SERVER_PATH: ixiaolong.ru/site
  BUILD_SERVER_OUTPUT: deploy-server
  DEPLOY_CLIENT_PATH: ixiaolong.ru/site/client
  BUILD_CLIENT_OUTPUT: client/dist

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 22.18.x
      # Записываем в переменные окружения имя текущей ветки
      # Чтобы избежать конфиликтов с URL, меняем точки на _, а слеши на минусы
      - name: Get branch name
        shell: bash
        run: echo "name=BRANCH_NAME::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g' | sed 's/\./_/g')" >> $GITHUB_ENV
      # Устанавливаем зависимости для сборки
      - name: Install Dependencies
        run: npm run install-all
      # Создаем .env файлы из secrets
      - name: Create Server .env file
        run: |
          echo "PORT=${{ secrets.SERVER_PORT }}" > server/.env
          echo "CLIENT_URL=${{ secrets.CLIENT_URL }}" >> server/.env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> server/.env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> server/.env
          echo "DB_USER=${{ secrets.DB_USER }}" >> server/.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> server/.env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> server/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> server/.env
          echo "ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}" >> server/.env
          echo "NODE_ENV=production" >> server/.env
          echo "USE_MOCK_DB=false" >> server/.env

      - name: Create Client .env file
        run: |
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" > client/.env
          echo "VITE_SOCKET_URL=${{ secrets.VITE_SOCKET_URL }}" >> client/.env
          echo "VITE_STUN_SERVERS=${{ secrets.VITE_STUN_SERVERS }}" >> client/.env
          echo "VITE_APP_NAME=Ять-глагол" >> client/.env
          echo "VITE_APP_VERSION=1.0.0" >> client/.env
          echo "VITE_DEV_MODE=false" >> client/.env

      # Собираем приложение
      - name: Build Application
        run: npm run build

      # Подготавливаем файлы для деплоя (только собранный бандл)
      - name: Prepare server files
        run: |
          # Создаем временную папку для деплоя
          mkdir -p deploy-server
          # Копируем собранный бандл (единый файл)
          cp server/dist/index.js deploy-server/
          # Копируем .env файл  
          cp server/.env deploy-server/
          # Копируем минимальный package.json (только mysql2)
          cp server/package.prod.json deploy-server/package.json

      - name: Deploy Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USERNAME }}
          key: ${{ secrets.DEPLOY_SERVER_KEY }}
          source: deploy-server
          target: ${{ env.DEPLOY_SERVER_PATH }}
          rm: false
          strip_components: 1

      # Устанавливаем зависимости на сервере
      - name: Install Server Dependencies
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USERNAME }}
          key: ${{ secrets.DEPLOY_SERVER_KEY }}
          script: |
            echo "=== Настройка окружения ===" 

            # Загружаем все возможные профили
            source ~/.bashrc 2>/dev/null || true
            source ~/.profile 2>/dev/null || true
            source ~/.bash_profile 2>/dev/null || true

            # Добавляем пути Node.js (включая Passenger путь)
            export PATH="$HOME/.local/bin:/usr/local/bin:/opt/nodejs/bin:/usr/bin:/bin:$PATH"
            export PATH="$HOME/.nvm/versions/node/*/bin:$PATH"
            export PATH="/usr/local/nodejs/bin:$PATH"

            echo "Текущий PATH: $PATH"

            # Ищем Node.js в различных местах (приоритет домашней папке)
            NODE_PATH=""
            for path in "$HOME/.local/bin/node" "/usr/local/bin/node" "/usr/bin/node" "/opt/nodejs/bin/node" "$HOME/.nvm/versions/node/*/bin/node" "/usr/local/nodejs/bin/node"; do
                if [ -f "$path" ] 2>/dev/null || [ -f $(echo $path) ] 2>/dev/null; then
                    NODE_PATH=$(dirname "$path")
                    export PATH="$NODE_PATH:$PATH"
                    echo "Найден Node.js в: $path"
                    break
                fi
            done

            echo "=== Проверка Node.js и npm ==="
            if command -v node >/dev/null 2>&1; then
                echo "✅ Node.js найден: $(node --version)"
            else
                echo "❌ Node.js не найден!"
                echo "Доступные команды:"
                which node 2>/dev/null || echo "node: не найден"
                ls -la /usr/local/bin/node* 2>/dev/null || echo "В /usr/local/bin нет node"
                ls -la /usr/bin/node* 2>/dev/null || echo "В /usr/bin нет node"
                exit 1
            fi

            if command -v npm >/dev/null 2>&1; then
                echo "✅ npm найден: $(npm --version)"
            else
                echo "❌ npm не найден!"
                exit 1
            fi

            echo "=== Установка минимальных зависимостей ==="
            cd ${{ env.DEPLOY_SERVER_PATH }}
            pwd
            ls -la

            # Устанавливаем только mysql2 (все остальное в бандле)
            npm install --production --silent

            echo "=== Проверка структуры файлов ==="
            echo "Основные файлы:"
            ls -la *.js *.json 2>/dev/null || echo "Нет JS/JSON файлов"

            if [ -d "node_modules" ]; then
                echo "✅ node_modules папка создана"
                if [ -d "node_modules/mysql2" ]; then
                    echo "✅ mysql2 модуль найден"
                else
                    echo "❌ mysql2 модуль НЕ найден!"
                fi
                echo "Установленные модули: $(ls -1 node_modules/ | wc -l)"
            else
                echo "❌ node_modules папка НЕ создана!"
            fi

            echo "=== Перезапуск Passenger приложения ==="

            # Passenger перезапускается при изменении файлов
            # Создаем/обновляем restart.txt для принудительного перезапуска
            mkdir -p tmp
            touch tmp/restart.txt
            echo "✅ Создан файл для перезапуска Passenger"

            # package.json уже скопирован из server папки при деплое
            if [ -f "package.json" ]; then
                echo "✅ package.json найден"
            else
                echo "❌ package.json не найден!"
                ls -la
                exit 1
            fi

            echo "✅ Приложение готово к перезапуску Passenger"
            echo "Passenger автоматически перезапустит приложение при следующем запросе"

      - name: Deploy client
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USERNAME }}
          key: ${{ secrets.DEPLOY_SERVER_KEY }}
          source: ${{ env.BUILD_CLIENT_OUTPUT }}
          target: ${{ env.DEPLOY_CLIENT_PATH }}
          rm: false
          strip_components: 1

      - name: Print Info
        run: echo "Deployed to ixiaolong.ru/site"
