#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */

const http = require("http")

function testServerStatus() {
  console.log("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞...")

  const options = {
    hostname: "localhost",
    port: 3001,
    path: "/api/friends",
    method: "GET",
    headers: {
      "Content-Type": "application/json",
    },
  }

  const req = http.request(options, (res) => {
    console.log(`üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${res.statusCode}`)
    console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:`, res.headers)

    let data = ""
    res.on("data", (chunk) => {
      data += chunk
    })

    res.on("end", () => {
      console.log(`üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:`, data)

      if (res.statusCode === 401) {
        console.log(
          "‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–∏–ª–∏ –æ–∂–∏–¥–∞–µ–º—É—é –æ—à–∏–±–∫—É 401 (–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)"
        )
      } else if (res.statusCode === 500) {
        console.log("‚ùå –û—à–∏–±–∫–∞ 500 - –ø—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        console.log("üí° –†–µ—à–µ–Ω–∏–µ: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä —Å –º–æ–∫–∞–º–∏: npm run dev:mock")
      } else {
        console.log(`‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${res.statusCode}`)
      }
    })
  })

  req.on("error", (error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:", error.message)
    console.log("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3001")
  })

  req.end()
}

testServerStatus()
