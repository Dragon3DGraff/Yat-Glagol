import { Server, Socket } from "socket.io"
// import { IDatabaseManager } from "../database/IDatabaseManager"

interface AuthenticatedSocket extends Socket {
  userId: number
  user?: any
}

export class SocketHandler {
  private io: Server
  private db: any
  private userSockets: Map<number, string[]> = new Map() // userId -> socketIds
  private socketUsers: Map<string, number> = new Map() // socketId -> userId

  constructor(io: Server, db: any) {
    this.io = io
    this.db = db
    this.setupEventHandlers()
  }

  private setupEventHandlers(): void {
    this.io.on("connection", (socket) => {
      const authSocket = socket as AuthenticatedSocket
      this.handleUserConnection(authSocket)
      this.setupMessageHandlers(authSocket)
      this.setupRoomHandlers(authSocket)
      this.setupTypingHandlers(authSocket)
      this.setupFriendsHandlers(authSocket)
      this.setupDisconnectionHandler(authSocket)
    })
  }

  handleUserConnection(socket: AuthenticatedSocket): void {
    const userId = socket.userId

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∫–µ—Ç –≤ –º–∞–ø–ø–∏–Ω–≥
    if (!this.userSockets.has(userId)) {
      this.userSockets.set(userId, [])
    }
    this.userSockets.get(userId)!.push(socket.id)
    this.socketUsers.set(socket.id, userId)

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    socket.join(`user:${userId}`)
    console.log(
      `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω –∫ –∫–æ–º–Ω–∞—Ç–µ user:${userId}`
    )

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –µ–≥–æ –∫–æ–º–Ω–∞—Ç–∞–º
    this.joinUserRooms(socket)

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.broadcastUserStatus(userId, "online")

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è (socket: ${socket.id})`)
  }

  private async joinUserRooms(socket: AuthenticatedSocket): Promise<void> {
    try {
      const userRooms = await this.db.getUserChatRooms(socket.userId)

      for (const room of userRooms) {
        socket.join(`room_${room.id}`)

        // –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        socket.to(`room_${room.id}`).emit("user_joined_room", {
          userId: socket.userId,
          roomId: room.id,
          timestamp: new Date(),
        })
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–∞–º:", error)
    }
  }

  private setupMessageHandlers(socket: AuthenticatedSocket): void {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    socket.on(
      "send_message",
      async (data: {
        roomId: number
        content: string
        messageType?: "text" | "image" | "file"
        replyTo?: number
      }) => {
        try {
          const { roomId, content, messageType = "text", replyTo } = data

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–æ–º–Ω–∞—Ç—ã
          const roomParticipants = await this.db.getRoomParticipants(roomId)
          const isParticipant = roomParticipants.some(
            (p: any) => p.id === socket.userId
          )

          if (!isParticipant) {
            socket.emit("error", {
              message: "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã",
            })
            return
          }

          console.log(
            `üìù –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${socket.userId}:`,
            { content, messageType, replyTo }
          )

          // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          const messageId = await this.db.createMessage(
            roomId,
            socket.userId,
            content,
            messageType,
            replyTo
          )

          console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: ${messageId}`)

          // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
          let newMessage
          if (typeof (this.db as any).getMessageById === "function") {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (MockDatabaseManager)
            newMessage = await (this.db as any).getMessageById(messageId)
          } else {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏
            const messages = await this.db.getRoomMessages(roomId, 50, 0)
            newMessage = messages.find((m: any) => m.id === messageId)
          }

          console.log(
            `üîç –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:`,
            newMessage
              ? { id: newMessage.id, content: newMessage.content }
              : "–ù–ï –ù–ê–ô–î–ï–ù–û"
          )

          if (newMessage) {
            console.log(
              `üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã ${roomId}`
            )

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã
            this.io.to(`room_${roomId}`).emit("new_message", newMessage)

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç–µ
            this.io.to(`room_${roomId}`).emit("room_updated", {
              roomId,
              lastMessage: newMessage,
              timestamp: new Date(),
            })
          } else {
            console.error(
              `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID ${messageId}`
            )
          }
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error)
          socket.emit("error", { message: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è" })
        }
      }
    )

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    socket.on(
      "edit_message",
      async (data: { messageId: number; newContent: string }) => {
        try {
          const { messageId, newContent } = data

          const success = await this.db.updateMessage(
            messageId,
            socket.userId,
            newContent
          )

          if (success) {
            // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–Ω–∞—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            // TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ roomId –ø–æ messageId
            socket.emit("message_edited", {
              messageId,
              newContent,
              editedAt: new Date(),
            })
          } else {
            socket.emit("error", {
              message: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
            })
          }
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", error)
          socket.emit("error", { message: "–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è" })
        }
      }
    )

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    socket.on("delete_message", async (data: { messageId: number }) => {
      try {
        const { messageId } = data

        const success = await this.db.deleteMessage(messageId, socket.userId)

        if (success) {
          socket.emit("message_deleted", {
            messageId,
            deletedAt: new Date(),
          })
        } else {
          socket.emit("error", { message: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ" })
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", error)
        socket.emit("error", { message: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è" })
      }
    })

    // –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    socket.on(
      "search_messages",
      async (data: { roomId: number; query: string; limit?: number }) => {
        try {
          const { roomId, query, limit = 20 } = data

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ
          const roomParticipants = await this.db.getRoomParticipants(roomId)
          const isParticipant = roomParticipants.some(
            (p: any) => p.id === socket.userId
          )

          if (!isParticipant) {
            socket.emit("error", { message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ" })
            return
          }

          const messages = await this.db.searchMessages(roomId, query, limit)

          socket.emit("search_results", {
            query,
            messages,
            roomId,
          })
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:", error)
          socket.emit("error", { message: "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π" })
        }
      }
    )
  }

  private setupRoomHandlers(socket: AuthenticatedSocket): void {
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
    socket.on("join_room", async (data: { roomId: number }) => {
      try {
        const { roomId } = data

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ
        const roomParticipants = await this.db.getRoomParticipants(roomId)
        const isParticipant = roomParticipants.some(
          (p: any) => p.id === socket.userId
        )

        if (isParticipant) {
          socket.join(`room_${roomId}`)

          // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
          const messages = await this.db.getRoomMessages(roomId, 50)

          socket.emit("joined_room", {
            roomId,
            messages,
            participants: roomParticipants,
          })

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
          socket.to(`room_${roomId}`).emit("user_joined_room", {
            userId: socket.userId,
            roomId,
            timestamp: new Date(),
          })
        } else {
          socket.emit("error", { message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ" })
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:", error)
        socket.emit("error", { message: "–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ" })
      }
    })

    // –ü–æ–∫–∏–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    socket.on("leave_room", (data: { roomId: number }) => {
      const { roomId } = data
      socket.leave(`room_${roomId}`)

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      socket.to(`room_${roomId}`).emit("user_left_room", {
        userId: socket.userId,
        roomId,
        timestamp: new Date(),
      })

      socket.emit("left_room", { roomId })
    })

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    socket.on(
      "load_messages",
      async (data: { roomId: number; offset?: number; limit?: number }) => {
        try {
          const { roomId, offset = 0, limit = 50 } = data

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ
          const roomParticipants = await this.db.getRoomParticipants(roomId)
          const isParticipant = roomParticipants.some(
            (p: any) => p.id === socket.userId
          )

          if (!isParticipant) {
            socket.emit("error", { message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ" })
            return
          }

          const messages = await this.db.getRoomMessages(roomId, limit, offset)

          socket.emit("messages_loaded", {
            roomId,
            messages,
            offset,
            hasMore: messages.length === limit,
          })
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", error)
          socket.emit("error", { message: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π" })
        }
      }
    )
  }

  private setupTypingHandlers(socket: AuthenticatedSocket): void {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—á–∞—Ç–∞–µ—Ç
    socket.on("typing_start", (data: { roomId: number }) => {
      const { roomId } = data
      socket.to(`room_${roomId}`).emit("user_typing", {
        userId: socket.userId,
        roomId,
        isTyping: true,
      })
    })

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª –ø–µ—á–∞—Ç–∞—Ç—å
    socket.on("typing_stop", (data: { roomId: number }) => {
      const { roomId } = data
      socket.to(`room_${roomId}`).emit("user_typing", {
        userId: socket.userId,
        roomId,
        isTyping: false,
      })
    })
  }

  private setupFriendsHandlers(socket: AuthenticatedSocket): void {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥—Ä—É–∂–±—É
    socket.on(
      "send_friend_request",
      async (data: { toUserId: number; message?: string }) => {
        try {
          const fromUserId = socket.userId

          if (fromUserId === data.toUserId) {
            socket.emit("friend_error", {
              message: "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É —Å–∞–º–æ–º—É —Å–µ–±–µ",
            })
            return
          }

          const requestId = await this.db.sendFriendRequest(
            fromUserId,
            data.toUserId,
            data.message
          )

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
          socket.emit("friend_request_sent", {
            id: requestId,
            fromUserId,
            toUserId: data.toUserId,
            status: "pending",
            message: data.message,
            createdAt: new Date(),
          })

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
          const fromUser = await this.db.getUserById(fromUserId)
          if (fromUser) {
            this.sendToUser(data.toUserId, "friend_request_received", {
              id: requestId,
              fromUserId,
              toUserId: data.toUserId,
              status: "pending",
              message: data.message,
              createdAt: new Date(),
              fromUser: {
                id: fromUser.id,
                username: fromUser.username,
                avatar_url: fromUser.avatar_url,
                status: fromUser.status,
              },
            })
          }

          console.log(
            `–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${fromUserId} -> ${data.toUserId}`
          )
        } catch (error: any) {
          console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥—Ä—É–∂–±—É:", error)
          socket.emit("friend_error", {
            message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
          })
        }
      }
    )

    // –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥—Ä—É–∂–±—É
    socket.on("accept_friend_request", async (data: { requestId: number }) => {
      try {
        const userId = socket.userId
        const result = await this.db.acceptFriendRequest(data.requestId, userId)

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–Ω–∏–º–∞—é—â–µ–≥–æ
        socket.emit("friend_request_accepted", {
          requestId: data.requestId,
          friendship: result.friendship,
          newRoomId: result.roomId,
        })

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∑–∞–ø—Ä–æ—Å–∞
        this.sendToUser(result.friendship.user_id, "friend_request_accepted", {
          requestId: data.requestId,
          friendship: result.friendship,
          newRoomId: result.roomId,
        })

        console.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –ø—Ä–∏–Ω—è—Ç: request ${data.requestId}`)
      } catch (error: any) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥—Ä—É–∂–±—É:", error)
        socket.emit("friend_error", {
          message: error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞",
        })
      }
    })

    // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥—Ä—É–∂–±—É
    socket.on("decline_friend_request", async (data: { requestId: number }) => {
      try {
        const userId = socket.userId
        const success = await this.db.declineFriendRequest(
          data.requestId,
          userId
        )

        if (success) {
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω—è—é—â–µ–≥–æ
          socket.emit("friend_request_declined", { requestId: data.requestId })

          // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ —É–≤–µ–¥–æ–º–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
          // this.sendToUser(fromUserId, "friend_request_declined", { requestId: data.requestId })

          console.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –æ—Ç–∫–ª–æ–Ω–µ–Ω: request ${data.requestId}`)
        } else {
          socket.emit("friend_error", {
            message: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å",
          })
        }
      } catch (error: any) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥—Ä—É–∂–±—É:", error)
        socket.emit("friend_error", {
          message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞",
        })
      }
    })

    // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–∑–µ–π
    socket.on("remove_friend", async (data: { friendId: number }) => {
      try {
        const userId = socket.userId
        const success = await this.db.removeFriend(userId, data.friendId)

        if (success) {
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
          socket.emit("friend_removed", { friendId: data.friendId })

          // –£–≤–µ–¥–æ–º–ª—è–µ–º —É–¥–∞–ª—è–µ–º–æ–≥–æ –¥—Ä—É–≥–∞
          this.sendToUser(data.friendId, "friend_removed", { friendId: userId })

          console.log(`–î—Ä—É–∂–±–∞ —É–¥–∞–ª–µ–Ω–∞: ${userId} <-> ${data.friendId}`)
        } else {
          socket.emit("friend_error", {
            message: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –¥—Ä—É–∑–µ–π",
          })
        }
      } catch (error: any) {
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞:", error)
        socket.emit("friend_error", {
          message: error.message || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –¥—Ä—É–∑–µ–π",
        })
      }
    })

    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    socket.on("block_user", async (data: { userId: number }) => {
      try {
        const blockerId = socket.userId
        const success = await this.db.blockUser(blockerId, data.userId)

        if (success) {
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ
          socket.emit("user_blocked", { userId: data.userId })

          console.log(
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${blockerId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª ${data.userId}`
          )
        } else {
          socket.emit("friend_error", {
            message: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
          })
        }
      } catch (error: any) {
        console.error("–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error)
        socket.emit("friend_error", {
          message: error.message || "–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        })
      }
    })

    // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    socket.on("unblock_user", async (data: { userId: number }) => {
      try {
        const unblockerId = socket.userId
        const success = await this.db.unblockUser(unblockerId, data.userId)

        if (success) {
          // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ
          socket.emit("user_unblocked", { userId: data.userId })

          console.log(
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${unblockerId} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª ${data.userId}`
          )
        } else {
          socket.emit("friend_error", {
            message: "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
          })
        }
      } catch (error: any) {
        console.error("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error)
        socket.emit("friend_error", {
          message: error.message || "–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        })
      }
    })
  }

  private setupDisconnectionHandler(socket: AuthenticatedSocket): void {
    socket.on("disconnect", () => {
      const userId = this.socketUsers.get(socket.id)

      if (userId) {
        // –£–¥–∞–ª—è–µ–º —Å–æ–∫–µ—Ç –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
        const userSocketIds = this.userSockets.get(userId)
        if (userSocketIds) {
          const index = userSocketIds.indexOf(socket.id)
          if (index > -1) {
            userSocketIds.splice(index, 1)
          }

          // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–∫–µ—Ç–æ–≤
          if (userSocketIds.length === 0) {
            this.userSockets.delete(userId)
            this.broadcastUserStatus(userId, "offline")
          }
        }

        this.socketUsers.delete(socket.id)
      }

      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è (socket: ${socket.id})`)
    })
  }

  private async broadcastUserStatus(
    userId: number,
    status: "online" | "offline" | "away"
  ): Promise<void> {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await this.db.updateUserStatus(userId, status)

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userRooms = await this.db.getUserChatRooms(userId)

      // –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
      for (const room of userRooms) {
        this.io.to(`room_${room.id}`).emit("user_status_changed", {
          userId,
          status,
          timestamp: new Date(),
        })
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ broadcast —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error)
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  getUserSocketIds(userId: number): string[] {
    return this.userSockets.get(userId) || []
  }

  isUserOnline(userId: number): boolean {
    return this.userSockets.has(userId)
  }

  sendToUser(userId: number, event: string, data: any): void {
    const socketIds = this.getUserSocketIds(userId)
    for (const socketId of socketIds) {
      this.io.to(socketId).emit(event, data)
    }
  }

  sendToRoom(roomId: number, event: string, data: any): void {
    this.io.to(`room_${roomId}`).emit(event, data)
  }
}
