import { Router, Request, Response } from "express"
import { body, param, query, validationResult } from "express-validator"
import rateLimit from "express-rate-limit"
import { dbManager, io } from "../index"

interface AuthenticatedRequest extends Request {
  userId?: number
  user?: any
}

const router = Router()

// Rate limiting –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥—Ä—É–∂–±—É
const isDevMode =
  process.env.NODE_ENV === "development" || process.env.USE_MOCK_DB === "true"
const friendRequestLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 —á–∞—Å
  max: isDevMode ? 10000 : 20, // 10000 –≤ dev —Ä–µ–∂–∏–º–µ, 20 –≤ production
  message: { error: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥—Ä—É–∂–±—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." },
  skip: (req) => isDevMode, // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –≤ dev —Ä–µ–∂–∏–º–µ
})

// –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
const validateSendFriendRequest = [
  body("userId")
    .isInt({ min: 1 })
    .withMessage("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"),
  body("message")
    .optional()
    .trim()
    .isLength({ max: 500 })
    .withMessage("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤"),
]

const validateUsernameSearch = [
  body("username")
    .trim()
    .isLength({ min: 3, max: 30 })
    .withMessage("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤")
    .matches(/^[a-zA-Z0-9_-]+$/)
    .withMessage("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -"),
  body("message")
    .optional()
    .trim()
    .isLength({ max: 500 })
    .withMessage("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤"),
]

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
router.get(
  "/",
  async (req: AuthenticatedRequest, res: Response): Promise<void> => {
    try {
      const userId = req.userId!
      const friends = await dbManager.getFriends(userId)

      res.json({
        success: true,
        data: { friends },
        message: "–°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ",
      })
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:", error)
      res.status(500).json({
        success: false,
        error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π",
      })
    }
  }
)

// –ü–æ–ª—É—á–∏—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥—Ä—É–∂–±—É
router.get(
  "/requests",
  async (req: AuthenticatedRequest, res: Response): Promise<void> => {
    try {
      const userId = req.userId!
      console.log(`üì• [API] GET /requests –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)

      const requests = await dbManager.getFriendRequests(userId)
      console.log(
        `üì• [API] –ü–æ–ª—É—á–µ–Ω–æ ${requests.length} –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:`,
        requests
      )

      const responseData = {
        success: true,
        data: { requests },
        message: "–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥—Ä—É–∂–±—É –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
      }

      console.log(`üì• [API] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç:`, responseData)
      res.json(responseData)
    } catch (error) {
      console.error("‚ùå [API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:", error)
      res.status(500).json({
        success: false,
        error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥—Ä—É–∂–±—É",
      })
    }
  }
)

// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥—Ä—É–∂–±—É
router.get(
  "/requests/sent",
  async (req: AuthenticatedRequest, res: Response): Promise<void> => {
    try {
      const userId = req.userId!
      console.log(`üì§ [API] GET /requests/sent –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)

      const sentRequests = await dbManager.getSentFriendRequests(userId)
      console.log(
        `üì§ [API] –ü–æ–ª—É—á–µ–Ω–æ ${sentRequests.length} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:`,
        sentRequests
      )

      const responseData = {
        success: true,
        data: { requests: sentRequests },
        message: "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
      }

      console.log(`üì§ [API] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç:`, responseData)
      res.json(responseData)
    } catch (error) {
      console.error("‚ùå [API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:", error)
      res.status(500).json({
        success: false,
        error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
      })
    }
  }
)

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post(
  "/request",
  friendRequestLimiter,
  validateSendFriendRequest,
  async (req: AuthenticatedRequest, res: Response): Promise<void> => {
    try {
      const errors = validationResult(req)
      if (!errors.isEmpty()) {
        res.status(400).json({
          success: false,
          error: "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          details: errors.array(),
        })
        return
      }

      const { userId: targetUserId, message } = req.body
      const currentUserId = req.userId!

      if (targetUserId === currentUserId) {
        res.status(400).json({
          success: false,
          error: "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É —Å–∞–º–æ–º—É —Å–µ–±–µ",
        })
        return
      }

      const requestId = await dbManager.sendFriendRequest(
        currentUserId,
        targetUserId,
        message
      )

      res.status(201).json({
        success: true,
        data: { requestId },
        message: "–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ",
      })
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", error)
      res.status(400).json({
        success: false,
        error: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥—Ä—É–∂–±—É",
      })
    }
  }
)

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post(
  "/request/username",
  friendRequestLimiter,
  validateUsernameSearch,
  async (req: AuthenticatedRequest, res: Response): Promise<void> => {
    try {
      const errors = validationResult(req)
      if (!errors.isEmpty()) {
        res.status(400).json({
          success: false,
          error: "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          details: errors.array(),
        })
        return
      }

      const { username, message } = req.body
      const currentUserId = req.userId!

      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
      const users = await dbManager.searchUsers(username)
      const targetUser = users.find(
        (user) => user.username.toLowerCase() === username.toLowerCase()
      )

      if (!targetUser) {
        res.status(404).json({
          success: false,
          error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
        })
        return
      }

      if (targetUser.id === currentUserId) {
        res.status(400).json({
          success: false,
          error: "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É —Å–∞–º–æ–º—É —Å–µ–±–µ",
        })
        return
      }

      const requestId = await dbManager.sendFriendRequest(
        currentUserId,
        targetUser.id,
        message
      )

      console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É —Å–æ–∑–¥–∞–Ω —Å ID: ${requestId}`)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Socket.IO —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        const friendRequests = await dbManager.getFriendRequests(targetUser.id)
        const sentRequests = await dbManager.getSentFriendRequests(
          currentUserId
        )

        console.log(
          `üì® –í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUser.id}:`,
          friendRequests.length
        )
        console.log(
          `üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${currentUserId}:`,
          sentRequests.length
        )

        const newRequest = friendRequests.find((req) => req.id === requestId)
        const newSentRequest = sentRequests.find((req) => req.id === requestId)

        console.log(
          `üîç –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å:`,
          newRequest ? `ID ${newRequest.id}` : "–ù–ï –ù–ê–ô–î–ï–ù"
        )
        console.log(
          `üîç –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:`,
          newSentRequest ? `ID ${newSentRequest.id}` : "–ù–ï –ù–ê–ô–î–ï–ù"
        )

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º –≤—Ö–æ–¥—è—â–µ–º –∑–∞–ø—Ä–æ—Å–µ
        if (newRequest) {
          const eventData = {
            request: newRequest,
            fromUser: {
              id: currentUserId,
              username: (await dbManager.getUserById(currentUserId))?.username,
            },
          }
          console.log(
            `üì® [SOCKET] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º friend_request_received –≤ –∫–æ–º–Ω–∞—Ç—É user:${targetUser.id}`,
            eventData
          )
          io.to(`user:${targetUser.id}`).emit(
            "friend_request_received",
            eventData
          )
        } else {
          console.error(
            `‚ùå [SOCKET] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è`
          )
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if (newSentRequest) {
          const eventData = {
            request: newSentRequest,
            toUser: {
              id: targetUser.id,
              username: targetUser.username,
            },
          }
          console.log(
            `üì§ [SOCKET] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º friend_request_sent –≤ –∫–æ–º–Ω–∞—Ç—É user:${currentUserId}`,
            eventData
          )
          io.to(`user:${currentUserId}`).emit("friend_request_sent", eventData)
        } else {
          console.error(
            `‚ùå [SOCKET] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è`
          )
        }

        console.log(
          `‚úÖ [SOCKET] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –¥—Ä—É–∂–±—É ${requestId}`
        )
      } catch (socketError) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Socket.IO —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", socketError)
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
      }

      res.status(201).json({
        success: true,
        data: {
          requestId,
          targetUser: {
            id: targetUser.id,
            username: targetUser.username,
            avatar_url: targetUser.avatar_url,
          },
        },
        message: "–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ",
      })
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", error)
      res.status(400).json({
        success: false,
        error: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥—Ä—É–∂–±—É",
      })
    }
  }
)

// –ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É
router.put(
  "/request/:requestId/accept",
  [param("requestId").isInt({ min: 1 })],
  async (req: AuthenticatedRequest, res: Response): Promise<void> => {
    try {
      const errors = validationResult(req)
      if (!errors.isEmpty()) {
        res.status(400).json({
          success: false,
          error: "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          details: errors.array(),
        })
        return
      }

      const requestId = parseInt(req.params.requestId)
      const userId = req.userId!

      const result = await dbManager.acceptFriendRequest(requestId, userId)

      res.json({
        success: true,
        data: {
          friendship: result.friendship,
          roomId: result.roomId,
        },
        message: "–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –ø—Ä–∏–Ω—è—Ç —É—Å–ø–µ—à–Ω–æ",
      })
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞:", error)
      res.status(400).json({
        success: false,
        error: error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥—Ä—É–∂–±—É",
      })
    }
  }
)

// –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É
router.put(
  "/request/:requestId/decline",
  [param("requestId").isInt({ min: 1 })],
  async (req: AuthenticatedRequest, res: Response): Promise<void> => {
    try {
      const errors = validationResult(req)
      if (!errors.isEmpty()) {
        res.status(400).json({
          success: false,
          error: "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          details: errors.array(),
        })
        return
      }

      const requestId = parseInt(req.params.requestId)
      const userId = req.userId!

      const success = await dbManager.declineFriendRequest(requestId, userId)

      if (success) {
        res.json({
          success: true,
          message: "–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –æ—Ç–∫–ª–æ–Ω–µ–Ω",
        })
      } else {
        res.status(404).json({
          success: false,
          error: "–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
        })
      }
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:", error)
      res.status(500).json({
        success: false,
        error: "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥—Ä—É–∂–±—É",
      })
    }
  }
)

// –£–¥–∞–ª–∏—Ç—å –∏–∑ –¥—Ä—É–∑–µ–π
router.delete(
  "/:friendId",
  [param("friendId").isInt({ min: 1 })],
  async (req: AuthenticatedRequest, res: Response): Promise<void> => {
    try {
      const errors = validationResult(req)
      if (!errors.isEmpty()) {
        res.status(400).json({
          success: false,
          error: "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          details: errors.array(),
        })
        return
      }

      const friendId = parseInt(req.params.friendId)
      const userId = req.userId!

      const success = await dbManager.removeFriend(userId, friendId)

      if (success) {
        res.json({
          success: true,
          message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –¥—Ä—É–∑–µ–π",
        })
      } else {
        res.status(404).json({
          success: false,
          error: "–î—Ä—É–∂–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
        })
      }
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞:", error)
      res.status(500).json({
        success: false,
        error: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –¥—Ä—É–∑–µ–π",
      })
    }
  }
)

// –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post(
  "/block/:userId",
  [param("userId").isInt({ min: 1 })],
  async (req: AuthenticatedRequest, res: Response): Promise<void> => {
    try {
      const errors = validationResult(req)
      if (!errors.isEmpty()) {
        res.status(400).json({
          success: false,
          error: "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          details: errors.array(),
        })
        return
      }

      const blockedUserId = parseInt(req.params.userId)
      const userId = req.userId!

      if (blockedUserId === userId) {
        res.status(400).json({
          success: false,
          error: "–ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è",
        })
        return
      }

      const success = await dbManager.blockUser(userId, blockedUserId)

      if (success) {
        res.json({
          success: true,
          message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
        })
      } else {
        res.status(500).json({
          success: false,
          error: "–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        })
      }
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", error)
      res.status(500).json({
        success: false,
        error: "–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      })
    }
  }
)

// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.delete(
  "/block/:userId",
  [param("userId").isInt({ min: 1 })],
  async (req: AuthenticatedRequest, res: Response): Promise<void> => {
    try {
      const errors = validationResult(req)
      if (!errors.isEmpty()) {
        res.status(400).json({
          success: false,
          error: "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          details: errors.array(),
        })
        return
      }

      const unblockedUserId = parseInt(req.params.userId)
      const userId = req.userId!

      const success = await dbManager.unblockUser(userId, unblockedUserId)

      if (success) {
        res.json({
          success: true,
          message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
        })
      } else {
        res.status(404).json({
          success: false,
          error: "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
        })
      }
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", error)
      res.status(500).json({
        success: false,
        error: "–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      })
    }
  }
)

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
router.get(
  "/status/:userId",
  [param("userId").isInt({ min: 1 })],
  async (req: AuthenticatedRequest, res: Response): Promise<void> => {
    try {
      const errors = validationResult(req)
      if (!errors.isEmpty()) {
        res.status(400).json({
          success: false,
          error: "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          details: errors.array(),
        })
        return
      }

      const otherUserId = parseInt(req.params.userId)
      const userId = req.userId!

      const status = await dbManager.getFriendshipStatus(userId, otherUserId)

      res.json({
        success: true,
        data: { status },
        message: "–°—Ç–∞—Ç—É—Å –æ—Ç–Ω–æ—à–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ",
      })
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", error)
      res.status(500).json({
        success: false,
        error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
      })
    }
  }
)

export default router
