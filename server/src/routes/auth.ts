import { Router, Request, Response } from "express"
import bcrypt from "bcryptjs"
import { body, validationResult } from "express-validator"
import rateLimit from "express-rate-limit"
import { AuthMiddleware } from "../middleware/AuthMiddleware"
import { dbManager } from "../index"

const router = Router()

// Rate limiting –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è dev —Ä–µ–∂–∏–º–∞)
const isDev =
  process.env.NODE_ENV === "development" || process.env.USE_MOCK_DB === "true"

console.log(
  `üîí [AUTH] –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: ${isDev}, NODE_ENV: ${process.env.NODE_ENV}, USE_MOCK_DB: ${process.env.USE_MOCK_DB}`
)

const authLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: isDev ? 10000 : 5, // 10000 –≤ dev —Ä–µ–∂–∏–º–µ, 5 –≤ production
  message: { error: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." },
  standardHeaders: true,
  legacyHeaders: false,
  skip: (req) => {
    const skipAuth =
      isDev || req.path === "/api/mock-info" || req.path === "/api/health"
    if (skipAuth) {
      console.log(
        `üîì [AUTH] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º rate limiting –¥–ª—è ${req.path}, dev —Ä–µ–∂–∏–º: ${isDev}`
      )
    }
    return skipAuth
  },
})

const registerLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 —á–∞—Å
  max: isDev ? 10000 : 3, // 10000 –≤ dev —Ä–µ–∂–∏–º–µ, 3 –≤ production
  message: { error: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." },
  standardHeaders: true,
  legacyHeaders: false,
  skip: (req) => {
    const skipRegister =
      isDev || req.path === "/api/mock-info" || req.path === "/api/health"
    if (skipRegister) {
      console.log(
        `üîì [REGISTER] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º rate limiting –¥–ª—è ${req.path}, dev —Ä–µ–∂–∏–º: ${isDev}`
      )
    }
    return skipRegister
  },
})

// –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
const validateRegister = [
  body("username")
    .trim()
    .isLength({ min: 3, max: 30 })
    .withMessage("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤")
    .matches(/^[a-zA-Z0-9_-]+$/)
    .withMessage("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -"),
  body("email")
    .isEmail()
    .withMessage("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email")
    .normalizeEmail(),
  body("password")
    .isLength({ min: 8 })
    .withMessage("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤")
    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/)
    .withMessage(
      "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É, –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É –∏ —Ü–∏—Ñ—Ä—É"
    ),
]

const validateLogin = [
  body("email")
    .isEmail()
    .withMessage("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email")
    .normalizeEmail(),
  body("password").notEmpty().withMessage("–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"),
]

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
router.post(
  "/register",
  registerLimiter,
  validateRegister,
  async (req: Request, res: Response): Promise<void> => {
    try {
      const errors = validationResult(req)
      if (!errors.isEmpty()) {
        res.status(400).json({
          error: "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          details: errors.array(),
        })
        return
      }

      const { username, email, password } = req.body

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
      const existingUser = await dbManager.getUserByEmail(email)
      if (existingUser) {
        res
          .status(409)
          .json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" })
        return
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å username
      // TODO: –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ getUserByUsername –≤ DatabaseManager

      // –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
      const saltRounds = 12
      const hashedPassword = await bcrypt.hash(password, saltRounds)

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userId = await dbManager.createUser(username, email, hashedPassword)

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
      const token = AuthMiddleware.generateToken(parseInt(userId), email)

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await dbManager.getUserById(userId)

      res.status(201).json({
        message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
        token,
        user: {
          id: user!.id,
          username: user!.username,
          email: user!.email,
          avatar_url: user!.avatar_url,
          status: user!.status,
        },
      })
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error)

      if (error instanceof Error && error.message.includes("Duplicate entry")) {
        if (error.message.includes("username")) {
          res.status(409).json({ error: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ" })
        } else if (error.message.includes("email")) {
          res.status(409).json({ error: "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" })
        } else {
          res.status(409).json({ error: "–î–∞–Ω–Ω—ã–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è" })
        }
      } else {
        res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" })
      }
    }
  }
)

// –í—Ö–æ–¥
router.post(
  "/login",
  authLimiter,
  validateLogin,
  async (req: Request, res: Response): Promise<void> => {
    try {
      const errors = validationResult(req)
      if (!errors.isEmpty()) {
        res.status(400).json({
          error: "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          details: errors.array(),
        })
        return
      }

      const { email, password } = req.body

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await dbManager.getUserByEmail(email)
      if (!user) {
        res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å" })
        return
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
      const isValidPassword = await bcrypt.compare(password, user.password_hash)
      if (!isValidPassword) {
        res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å" })
        return
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ online
      await dbManager.updateUserStatus(user.id, "online")

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
      const token = AuthMiddleware.generateToken(parseInt(user.id), user.email)

      res.json({
        message: "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
        token,
        user: {
          id: user.id,
          username: user.username,
          email: user.email,
          avatar_url: user.avatar_url,
          status: "online",
        },
      })
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error)
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" })
    }
  }
)

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
router.post("/refresh", AuthMiddleware.verifyToken, AuthMiddleware.refreshToken)

// –í—ã—Ö–æ–¥
router.post(
  "/logout",
  AuthMiddleware.verifyToken,
  async (req: any, res: Response): Promise<void> => {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ offline
      await dbManager.updateUserStatus(req.userId, "offline")

      res.json({ message: "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ" })
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error)
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" })
    }
  }
)

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
router.get(
  "/verify",
  AuthMiddleware.verifyToken,
  async (req: any, res: Response): Promise<void> => {
    try {
      const user = await dbManager.getUserById(req.userId)

      if (!user) {
        res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" })
        return
      }

      res.json({
        user: {
          id: user.id,
          username: user.username,
          email: user.email,
          avatar_url: user.avatar_url,
          status: user.status,
        },
      })
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:", error)
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" })
    }
  }
)

// –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è (–æ—Ç–ø—Ä–∞–≤–∫–∞ email)
router.post(
  "/forgot-password",
  authLimiter,
  [body("email").isEmail().normalizeEmail()],
  async (req: Request, res: Response): Promise<void> => {
    try {
      const errors = validationResult(req)
      if (!errors.isEmpty()) {
        res.status(400).json({
          error: "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          details: errors.array(),
        })
        return
      }

      const { email } = req.body

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const user = await dbManager.getUserByEmail(email)

      // –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º —É—Å–ø–µ—Ö–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ email)
      res.json({
        message:
          "–ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∞ –Ω–µ–≥–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è",
      })

      if (user) {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
        console.log(`–ó–∞–ø—Ä–æ—Å —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email}`)
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:", error)
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" })
    }
  }
)

export default router
