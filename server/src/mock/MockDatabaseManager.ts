import * as bcrypt from "bcryptjs"
import * as CryptoJS from "crypto-js"
import { DatabaseManager } from "../database/DatabaseManager"

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —á—Ç–æ –∏ –≤ DatabaseManager –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
interface MockUser {
  id: number
  username: string
  email: string
  password_hash: string
  avatar_url?: string
  status: "online" | "offline" | "away"
  created_at: Date
  last_active: Date
  last_seen: Date
}

interface MockChatRoom {
  id: number
  name: string
  description?: string
  type: "private" | "group" | "public"
  created_by: number
  created_at: Date
  updated_at: Date
  participants?: MockUser[]
}

interface MockMessage {
  id: number
  room_id: number
  user_id: number
  content: string // —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
  message_type: "text" | "image" | "file" | "system"
  reply_to?: number
  created_at: Date
  edited_at?: Date
  user?: MockUser
}

interface MockParticipant {
  room_id: number
  user_id: number
  role: "admin" | "moderator" | "member"
  joined_at: Date
}

export class MockDatabaseManager {
  private users: Map<number, MockUser> = new Map()
  private chatRooms: Map<number, MockChatRoom> = new Map()
  private messages: Map<number, MockMessage> = new Map()
  private participants: Map<string, MockParticipant> = new Map() // key: roomId_userId
  private encryptionKey: string
  private nextUserId = 1
  private nextRoomId = 1
  private nextMessageId = 1

  private getNextId(): number {
    return Math.max(this.nextUserId, this.nextRoomId, this.nextMessageId) + 1
  }

  constructor() {
    this.encryptionKey =
      (process?.env?.ENCRYPTION_KEY as string) ||
      "mock-encryption-key-for-development"
  }

  async initialize(): Promise<void> {
    await this.initializeMockData()
    console.log("‚úÖ Mock Database –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
  }

  private async initializeMockData() {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const testUsers = [
      {
        email: "alice@example.com",
        password: "password123",
        username: "Alice",
        avatar_url: "üë©‚Äçüíª",
      },
      {
        email: "bob@example.com",
        password: "password123",
        username: "Bob",
        avatar_url: "üë®‚Äçüíº",
      },
      {
        email: "charlie@example.com",
        password: "password123",
        username: "Charlie",
        avatar_url: "üßë‚Äçüé®",
      },
      {
        email: "diana@example.com",
        password: "password123",
        username: "Diana",
        avatar_url: "üë©‚Äçüî¨",
      },
      {
        email: "admin@example.com",
        password: "admin123",
        username: "Admin",
        avatar_url: "üëë",
      },
    ]

    for (const userData of testUsers) {
      const hashedPassword = await bcrypt.hash(userData.password, 10)
      const userId = this.nextUserId++

      this.users.set(userId, {
        id: userId,
        email: userData.email,
        password_hash: hashedPassword,
        username: userData.username,
        avatar_url: userData.avatar_url,
        status: "offline",
        created_at: new Date(),
        last_active: new Date(),
        last_seen: new Date(),
      })
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥—Ä—É–∂–µ—Å–∫–∏–µ —Å–≤—è–∑–∏
    await this.createTestFriendships()
  }

  private async createTestFriendships() {
    // Alice –∏ Bob - –¥—Ä—É–∑—å—è
    const aliceBobRoomId = await this.createFriendRoom(1, 2)

    // –°–æ–∑–¥–∞–µ–º –¥—Ä—É–∂–±—É Alice -> Bob
    const friendship1 = {
      id: this.friendshipIdCounter++,
      user_id: 1,
      friend_id: 2,
      status: "accepted",
      room_id: aliceBobRoomId,
      created_at: new Date(),
      updated_at: new Date(),
    }
    this.friendships.set(friendship1.id.toString(), friendship1)

    // –°–æ–∑–¥–∞–µ–º –¥—Ä—É–∂–±—É Bob -> Alice
    const friendship2 = {
      id: this.friendshipIdCounter++,
      user_id: 2,
      friend_id: 1,
      status: "accepted",
      room_id: aliceBobRoomId,
      created_at: new Date(),
      updated_at: new Date(),
    }
    this.friendships.set(friendship2.id.toString(), friendship2)

    // Charlie –∏ Diana - –¥—Ä—É–∑—å—è
    const charlieDianaRoomId = await this.createFriendRoom(3, 4)

    // –°–æ–∑–¥–∞–µ–º –¥—Ä—É–∂–±—É Charlie -> Diana
    const friendship3 = {
      id: this.friendshipIdCounter++,
      user_id: 3,
      friend_id: 4,
      status: "accepted",
      room_id: charlieDianaRoomId,
      created_at: new Date(),
      updated_at: new Date(),
    }
    this.friendships.set(friendship3.id.toString(), friendship3)

    // –°–æ–∑–¥–∞–µ–º –¥—Ä—É–∂–±—É Diana -> Charlie
    const friendship4 = {
      id: this.friendshipIdCounter++,
      user_id: 4,
      friend_id: 3,
      status: "accepted",
      room_id: charlieDianaRoomId,
      created_at: new Date(),
      updated_at: new Date(),
    }
    this.friendships.set(friendship4.id.toString(), friendship4)

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –æ—Ç Alice –∫ Charlie
    const request1 = {
      id: this.requestIdCounter++,
      from_user_id: 1,
      to_user_id: 3,
      status: "pending",
      message: "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –¥—Ä—É–∂–∏—Ç—å!",
      created_at: new Date(),
      updated_at: new Date(),
    }
    this.friendRequests.set(request1.id.toString(), request1)

    console.log("‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥—Ä—É–∂–µ—Å–∫–∏–µ —Å–≤—è–∑–∏:")
    console.log("  - Alice –∏ Bob - –¥—Ä—É–∑—å—è")
    console.log("  - Charlie –∏ Diana - –¥—Ä—É–∑—å—è")
    console.log("  - Alice –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –∑–∞–ø—Ä–æ—Å Charlie")
  }

  private encrypt(text: string): string {
    return CryptoJS.AES.encrypt(text, this.encryptionKey).toString()
  }

  private decrypt(encryptedText: string): string {
    try {
      const bytes = CryptoJS.AES.decrypt(encryptedText, this.encryptionKey)
      return bytes.toString(CryptoJS.enc.Utf8)
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:", error)
      return "[–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å]"
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å DatabaseManager)
  async getUserByEmail(email: string): Promise<MockUser | null> {
    for (const user of this.users.values()) {
      if (user.email === email) {
        return user
      }
    }
    return null
  }

  async getUserById(id: number): Promise<MockUser | null> {
    return this.users.get(id) || null
  }

  async createUser(
    username: string,
    email: string,
    password_hash: string
  ): Promise<number> {
    const userId = this.nextUserId++

    const user: MockUser = {
      id: userId,
      email,
      password_hash,
      username,
      avatar_url: undefined,
      status: "offline",
      created_at: new Date(),
      last_active: new Date(),
      last_seen: new Date(),
    }

    this.users.set(userId, user)
    return userId
  }

  async updateUserStatus(
    userId: number,
    status: "online" | "offline" | "away"
  ): Promise<void> {
    const user = this.users.get(userId)
    if (user) {
      user.status = status
      user.last_active = new Date()
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å DatabaseManager)
  async createChatRoom(
    name: string,
    description: string,
    type: "private" | "group" | "public",
    createdBy: number
  ): Promise<number> {
    const roomId = this.nextRoomId++

    const room: MockChatRoom = {
      id: roomId,
      name,
      description,
      type,
      created_by: createdBy,
      created_at: new Date(),
      updated_at: new Date(),
    }

    this.chatRooms.set(roomId, room)

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await this.addRoomParticipant(roomId, createdBy, "admin")

    return roomId
  }

  async getChatRoom(roomId: number): Promise<MockChatRoom | null> {
    const room = this.chatRooms.get(roomId)
    if (!room) return null

    // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const participants = await this.getRoomParticipants(roomId)

    return {
      ...room,
      participants,
      participantCount: participants.length,
    } as any
  }

  async getUserChatRooms(userId: number): Promise<MockChatRoom[]> {
    const userRooms: MockChatRoom[] = []

    for (const [roomId, room] of this.chatRooms) {
      const participantKey = `${roomId}_${userId}`
      if (this.participants.has(participantKey)) {
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–º–Ω–∞—Ç–µ
        let messageCount = 0
        for (const message of this.messages.values()) {
          if (message.room_id === roomId) {
            messageCount++
          }
        }

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
        const participants = await this.getRoomParticipants(roomId)

        userRooms.push({
          ...room,
          message_count: messageCount,
          participantCount: participants.length,
        } as any)
      }
    }

    return userRooms.sort(
      (a, b) => b.updated_at.getTime() - a.updated_at.getTime()
    )
  }

  async addRoomParticipant(
    roomId: number,
    userId: number,
    role: "admin" | "moderator" | "member" = "member"
  ): Promise<void> {
    const participantKey = `${roomId}_${userId}`

    const participant: MockParticipant = {
      room_id: roomId,
      user_id: userId,
      role,
      joined_at: new Date(),
    }

    this.participants.set(participantKey, participant)
  }

  async getRoomParticipants(roomId: number): Promise<MockUser[]> {
    const participantUsers: MockUser[] = []

    for (const participant of this.participants.values()) {
      if (participant.room_id === roomId) {
        const user = this.users.get(participant.user_id)
        if (user) {
          participantUsers.push({
            ...user,
            role: participant.role,
          } as any)
        }
      }
    }

    return participantUsers.sort(
      (a, b) => a.created_at.getTime() - b.created_at.getTime()
    )
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  async createMessage(
    roomId: number,
    userId: number,
    content: string,
    messageType: "text" | "image" | "file" | "system" = "text",
    replyTo?: number
  ): Promise<number> {
    const messageId = this.nextMessageId++
    const encryptedContent = this.encrypt(content)

    const message: MockMessage = {
      id: messageId,
      room_id: roomId,
      user_id: userId,
      content: encryptedContent,
      message_type: messageType,
      reply_to: replyTo,
      created_at: new Date(),
    }

    this.messages.set(messageId, message)

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞
    const room = this.chatRooms.get(roomId)
    if (room) {
      room.updated_at = new Date()
    }

    return messageId
  }

  async getMessageById(messageId: number): Promise<MockMessage | null> {
    const message = this.messages.get(messageId)
    if (!message) {
      return null
    }

    const user = this.users.get(message.user_id)
    const decryptedMessage: MockMessage = {
      ...message,
      content: this.decrypt(message.content),
      user: user
        ? ({
            id: user.id,
            username: user.username,
            email: "",
            avatar_url: user.avatar_url || "",
            status: user.status,
            last_seen: user.last_active,
            created_at: user.created_at,
          } as any)
        : undefined,
    }

    return decryptedMessage
  }

  async getRoomMessages(
    roomId: number,
    limit: number = 50,
    offset: number = 0
  ): Promise<MockMessage[]> {
    const roomMessages: MockMessage[] = []

    for (const message of this.messages.values()) {
      if (message.room_id === roomId) {
        const user = this.users.get(message.user_id)
        const decryptedMessage: MockMessage = {
          ...message,
          content: this.decrypt(message.content),
          user: user
            ? ({
                id: user.id,
                username: user.username,
                email: "",
                avatar_url: user.avatar_url || "",
                status: user.status,
                last_seen: user.last_active,
                created_at: user.created_at,
              } as any)
            : undefined,
        }
        roomMessages.push(decryptedMessage)
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏)
    roomMessages.sort((a, b) => a.created_at.getTime() - b.created_at.getTime())

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    return roomMessages.slice(offset, offset + limit)
  }

  async updateMessage(
    messageId: number,
    userId: number,
    newContent: string
  ): Promise<boolean> {
    const message = this.messages.get(messageId)

    if (!message || message.user_id !== userId) {
      return false
    }

    message.content = this.encrypt(newContent)
    message.edited_at = new Date()

    return true
  }

  async deleteMessage(messageId: number, userId: number): Promise<boolean> {
    const message = this.messages.get(messageId)

    if (!message || message.user_id !== userId) {
      return false
    }

    this.messages.delete(messageId)
    return true
  }

  async searchMessages(
    query: string,
    roomId?: number,
    limit: number = 20
  ): Promise<MockMessage[]> {
    let messages = Array.from(this.messages.values())

    if (roomId) {
      messages = messages.filter((msg) => msg.room_id === roomId)
    }

    const filteredMessages = messages
      .filter((msg) => msg.content.toLowerCase().includes(query.toLowerCase()))
      .slice(0, limit)

    return filteredMessages
  }

  // –°–ª—É–∂–µ–±–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  getMockDataInfo(): any {
    return {
      users: this.users.size,
      chats: this.chatRooms.size,
      messages: this.messages.size,
      participants: this.participants.size,
      test_accounts: [
        {
          email: "alice@example.com",
          password: "password123",
          nickname: "Alice",
        },
        { email: "bob@example.com", password: "password123", nickname: "Bob" },
        {
          email: "charlie@example.com",
          password: "password123",
          nickname: "Charlie",
        },
        {
          email: "diana@example.com",
          password: "password123",
          nickname: "Diana",
        },
        { email: "admin@example.com", password: "admin123", nickname: "Admin" },
      ],
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥—Ä—É–∑—å—è–º–∏

  private friendships: Map<string, any> = new Map()
  private friendRequests: Map<string, any> = new Map()
  private friendshipIdCounter = 1
  private requestIdCounter = 1

  async getFriends(userId: number): Promise<any[]> {
    const friends = Array.from(this.friendships.values()).filter(
      (friendship) =>
        (friendship.user_id === userId || friendship.friend_id === userId) &&
        friendship.status === "accepted"
    )

    console.log(
      `üë• [MOCK-DB] getFriends –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: –Ω–∞–π–¥–µ–Ω–æ ${friends.length} friendship –∑–∞–ø–∏—Å–µ–π`
    )

    const result = []
    const seenFriendIds = new Set<number>() // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π

    for (const friendship of friends) {
      const friendId =
        friendship.user_id === userId
          ? friendship.friend_id
          : friendship.user_id

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ–≥–æ –¥—Ä—É–≥–∞
      if (seenFriendIds.has(friendId)) {
        console.log(`‚ö†Ô∏è [MOCK-DB] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç –¥—Ä—É–≥–∞ —Å ID: ${friendId}`)
        continue
      }
      seenFriendIds.add(friendId)

      const friendUser = await this.getUserById(friendId)
      if (friendUser) {
        console.log(
          `‚ûï [MOCK-DB] –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∞: ${friendUser.username} (ID: ${friendId})`
        )
        result.push({
          id: friendship.id,
          userId: friendship.user_id,
          friendId: friendship.friend_id,
          status: friendship.status,
          createdAt: friendship.created_at,
          roomId: friendship.room_id,
          friend: {
            id: friendUser.id,
            username: friendUser.username,
            email: friendUser.email,
            avatar_url: friendUser.avatar_url,
            status: friendUser.status,
            last_seen: friendUser.last_active,
            created_at: friendUser.created_at,
          },
        })
      }
    }

    console.log(
      `‚úÖ [MOCK-DB] getFriends —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${result.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥—Ä—É–∑–µ–π`
    )
    return result
  }

  async getFriendRequests(userId: number): Promise<any[]> {
    const requests = Array.from(this.friendRequests.values()).filter(
      (request) => request.to_user_id === userId && request.status === "pending"
    )

    const result = []
    for (const request of requests) {
      const fromUser = await this.getUserById(request.from_user_id)
      if (fromUser) {
        result.push({
          id: request.id,
          from_user_id: request.from_user_id,
          from_username: fromUser.username,
          from_avatar: fromUser.avatar_url,
          created_at: request.created_at,
        })
      }
    }
    return result
  }

  async getSentFriendRequests(userId: number): Promise<any[]> {
    const requests = Array.from(this.friendRequests.values()).filter(
      (request) =>
        request.from_user_id === userId && request.status === "pending"
    )

    const result = []
    for (const request of requests) {
      const toUser = await this.getUserById(request.to_user_id)
      if (toUser) {
        result.push({
          id: request.id,
          to_user_id: request.to_user_id,
          to_username: toUser.username,
          to_avatar: toUser.avatar_url,
          created_at: request.created_at,
        })
      }
    }
    return result
  }

  async sendFriendRequest(
    fromUserId: number,
    toUserId: number,
    message?: string
  ): Promise<number> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const fromUser = await this.getUserById(fromUserId)
    const toUser = await this.getUserById(toUserId)
    if (!fromUser || !toUser) {
      throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å–∞
    const existingRequest = Array.from(this.friendRequests.values()).find(
      (request) =>
        ((request.from_user_id === fromUserId &&
          request.to_user_id === toUserId) ||
          (request.from_user_id === toUserId &&
            request.to_user_id === fromUserId)) &&
        request.status === "pending"
    )

    if (existingRequest) {
      throw new Error("–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ª–∏ —É–∂–µ –¥—Ä—É–∑—å—è–º–∏
    const existingFriendship = Array.from(this.friendships.values()).find(
      (friendship) =>
        ((friendship.user_id === fromUserId &&
          friendship.friend_id === toUserId) ||
          (friendship.user_id === toUserId &&
            friendship.friend_id === fromUserId)) &&
        friendship.status === "accepted"
    )

    if (existingFriendship) {
      throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —è–≤–ª—è—é—Ç—Å—è –¥—Ä—É–∑—å—è–º–∏")
    }

    const requestId = this.requestIdCounter++
    const request = {
      id: requestId,
      from_user_id: fromUserId,
      to_user_id: toUserId,
      status: "pending",
      message: message || null,
      created_at: new Date(),
      updated_at: new Date(),
    }

    this.friendRequests.set(requestId.toString(), request)
    return requestId
  }

  async acceptFriendRequest(
    requestId: number,
    userId: number
  ): Promise<{ friendship: any; roomId?: number }> {
    const request = this.friendRequests.get(requestId.toString())

    if (!request) {
      throw new Error("–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –Ω–µ –Ω–∞–π–¥–µ–Ω")
    }

    if (request.to_user_id !== userId) {
      throw new Error("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
    }

    if (request.status !== "pending") {
      throw new Error("–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
    request.status = "accepted"
    request.updated_at = new Date()
    this.friendRequests.set(requestId.toString(), request)

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –¥—Ä—É–∑–µ–π
    const roomId = await this.createFriendRoom(
      request.from_user_id,
      request.to_user_id
    )

    // –°–æ–∑–¥–∞–µ–º –¥—Ä—É–∂–±—É
    const friendshipId = this.friendshipIdCounter++
    const friendship = {
      id: friendshipId,
      user_id: request.from_user_id,
      friend_id: request.to_user_id,
      status: "accepted",
      room_id: roomId,
      created_at: new Date(),
      updated_at: new Date(),
    }

    this.friendships.set(friendshipId.toString(), friendship)

    // –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    const friendshipId2 = this.friendshipIdCounter++
    const friendship2 = {
      id: friendshipId2,
      user_id: request.to_user_id,
      friend_id: request.from_user_id,
      status: "accepted",
      room_id: roomId,
      created_at: new Date(),
      updated_at: new Date(),
    }

    this.friendships.set(friendshipId2.toString(), friendship2)

    return { friendship: friendship, roomId: roomId }
  }

  async declineFriendRequest(
    requestId: number,
    userId: number
  ): Promise<boolean> {
    const request = this.friendRequests.get(requestId.toString())

    if (!request) {
      return false
    }

    if (request.to_user_id !== userId) {
      return false
    }

    if (request.status !== "pending") {
      return false
    }

    request.status = "declined"
    request.updated_at = new Date()
    this.friendRequests.set(requestId.toString(), request)

    return true
  }

  async removeFriend(userId: number, friendId: number): Promise<boolean> {
    const friendships = Array.from(this.friendships.values()).filter(
      (friendship) =>
        ((friendship.user_id === userId && friendship.friend_id === friendId) ||
          (friendship.user_id === friendId &&
            friendship.friend_id === userId)) &&
        friendship.status === "accepted"
    )

    if (friendships.length === 0) {
      return false
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥—Ä—É–∂–±—ã
    for (const friendship of friendships) {
      this.friendships.delete(friendship.id.toString())
    }

    return true
  }

  async blockUser(userId: number, blockedUserId: number): Promise<boolean> {
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –¥—Ä—É–∂–±—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    await this.removeFriend(userId, blockedUserId)

    // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    const friendshipId = this.friendshipIdCounter++
    const friendship = {
      id: friendshipId,
      user_id: userId,
      friend_id: blockedUserId,
      status: "blocked",
      room_id: null,
      created_at: new Date(),
      updated_at: new Date(),
    }

    this.friendships.set(friendshipId.toString(), friendship)
    return true
  }

  async unblockUser(userId: number, unblockedUserId: number): Promise<boolean> {
    const friendship = Array.from(this.friendships.values()).find(
      (f) =>
        f.user_id === userId &&
        f.friend_id === unblockedUserId &&
        f.status === "blocked"
    )

    if (!friendship) {
      return false
    }

    this.friendships.delete(friendship.id.toString())
    return true
  }

  async getFriendshipStatus(
    userId: number,
    otherUserId: number
  ): Promise<string> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const blocked = Array.from(this.friendships.values()).find(
      (f) =>
        f.user_id === userId &&
        f.friend_id === otherUserId &&
        f.status === "blocked"
    )
    if (blocked) return "blocked"

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è—é—Ç—Å—è –ª–∏ –¥—Ä—É–∑—å—è–º–∏
    const friendship = Array.from(this.friendships.values()).find(
      (f) =>
        ((f.user_id === userId && f.friend_id === otherUserId) ||
          (f.user_id === otherUserId && f.friend_id === userId)) &&
        f.status === "accepted"
    )
    if (friendship) return "friends"

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º pending –∑–∞–ø—Ä–æ—Å—ã
    const sentRequest = Array.from(this.friendRequests.values()).find(
      (r) =>
        r.from_user_id === userId &&
        r.to_user_id === otherUserId &&
        r.status === "pending"
    )
    if (sentRequest) return "pending_sent"

    const receivedRequest = Array.from(this.friendRequests.values()).find(
      (r) =>
        r.from_user_id === otherUserId &&
        r.to_user_id === userId &&
        r.status === "pending"
    )
    if (receivedRequest) return "pending_received"

    return "none"
  }

  async createFriendRoom(userId: number, friendId: number): Promise<number> {
    const user1 = await this.getUserById(userId)
    const user2 = await this.getUserById(friendId)

    if (!user1 || !user2) {
      throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –¥–≤—É—Ö –¥—Ä—É–∑–µ–π
    const roomName = `${user1.username} & ${user2.username}`
    const roomId = await this.createChatRoom(
      roomName,
      "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç –º–µ–∂–¥—É –¥—Ä—É–∑—å—è–º–∏",
      "private",
      userId
    )

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–Ω–∞—Ç—É
    await this.addRoomParticipant(roomId, userId, "admin")
    await this.addRoomParticipant(roomId, friendId, "admin")

    return roomId
  }

  async searchUsers(query: string): Promise<MockUser[]> {
    const searchQuery = query.toLowerCase().trim()

    if (!searchQuery) {
      return []
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ username –∏ email
    const matchingUsers: MockUser[] = []

    for (const user of this.users.values()) {
      const matchesUsername = user.username.toLowerCase().includes(searchQuery)
      const matchesEmail = user.email.toLowerCase().includes(searchQuery)

      if (matchesUsername || matchesEmail) {
        matchingUsers.push(user)
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è username –≤ –Ω–∞—á–∞–ª–µ
    matchingUsers.sort((a, b) => {
      const aExactUsername = a.username.toLowerCase() === searchQuery ? 0 : 1
      const bExactUsername = b.username.toLowerCase() === searchQuery ? 0 : 1

      if (aExactUsername !== bExactUsername) {
        return aExactUsername - bExactUsername
      }

      // –ó–∞—Ç–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
      return a.username.localeCompare(b.username)
    })

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º–∞–∫—Å–∏–º—É–º 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    return matchingUsers.slice(0, 50)
  }
}
