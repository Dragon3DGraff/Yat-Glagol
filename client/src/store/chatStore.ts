import { create } from "zustand"
import { ChatState, ChatRoom, Message, User } from "@/types"
import { apiService } from "@/services/api"
import { socketService } from "@/services/socket"
import toast from "react-hot-toast"

interface ChatStore extends ChatState {
  // Actions
  loadRooms: () => Promise<void>
  createRoom: (
    name: string,
    description?: string,
    type?: "private" | "group" | "public"
  ) => Promise<boolean>
  selectRoom: (room: ChatRoom) => Promise<void>
  joinRoom: (roomId: number) => void
  leaveRoom: (roomId: number) => void
  sendMessage: (
    roomId: number,
    content: string,
    messageType?: "text" | "image" | "file",
    replyTo?: number
  ) => void
  loadMessages: (
    roomId: number,
    offset?: number,
    limit?: number
  ) => Promise<void>
  addMessage: (message: Message) => void
  updateMessage: (messageId: number, newContent: string, editedAt: Date) => void
  removeMessage: (messageId: number) => void
  setTypingUser: (roomId: number, userId: number, isTyping: boolean) => void
  updateRoomParticipants: (roomId: number, participants: User[]) => void
  setLoading: (loading: boolean) => void
  setError: (error: string | null) => void
  clearMessages: (roomId: number) => void
}

export const useChatStore = create<ChatStore>((set, get) => ({
  // Initial state
  rooms: [],
  activeRoom: null,
  messages: {},
  isLoading: false,
  error: null,
  typingUsers: {},

  // Actions
  loadRooms: async () => {
    set({ isLoading: true, error: null })

    try {
      const response = await apiService.getRooms()

      if (response.success && response.data) {
        set({
          rooms: response.data.rooms,
          isLoading: false,
          error: null,
        })
      } else {
        set({
          isLoading: false,
          error: response.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç",
        })
        toast.error(response.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç")
      }
    } catch (error: any) {
      const errorMessage =
        error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–Ω–∞—Ç"
      set({
        isLoading: false,
        error: errorMessage,
      })
      toast.error(errorMessage)
    }
  },

  createRoom: async (name: string, description = "", type = "group") => {
    set({ isLoading: true, error: null })

    try {
      const response = await apiService.createRoom({ name, description, type })

      if (response.success && response.data) {
        const newRoom = response.data.room

        set((state) => ({
          rooms: [newRoom, ...state.rooms],
          isLoading: false,
          error: null,
        }))

        toast.success("–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return true
      } else {
        set({
          isLoading: false,
          error: response.error || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã",
        })
        toast.error(response.error || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã")
        return false
      }
    } catch (error: any) {
      const errorMessage =
        error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã"
      set({
        isLoading: false,
        error: errorMessage,
      })
      toast.error(errorMessage)
      return false
    }
  },

  selectRoom: async (room: ChatRoom) => {
    set({ activeRoom: room, isLoading: true })

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ socket –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ listeners –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
      if (!socketService.isConnected()) {
        console.warn("Socket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–º–Ω–∞—Ç—ã")
        set({ isLoading: false })
        return
      }

      // –ï—Å–ª–∏ listeners –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ö–∞–Ω–∏–∑–º
      if (!chatListenersSetup) {
        console.log("Listeners –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º...")
        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ setTimeout —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        setTimeout(() => setupChatSocketListeners(), 0)
      }

      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ —á–µ—Ä–µ–∑ Socket.IO
      console.log(`üè† –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ: ${room.name} (ID: ${room.id})`)
      socketService.joinRoom(room.id)

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
      const currentMessages = get().messages[room.id]
      if (!currentMessages || currentMessages.length === 0) {
        await get().loadMessages(room.id)
      }

      set({ isLoading: false })
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–º–Ω–∞—Ç—ã:", error)
      set({ isLoading: false })
    }
  },

  joinRoom: (roomId: number) => {
    socketService.joinRoom(roomId)
  },

  leaveRoom: (roomId: number) => {
    socketService.leaveRoom(roomId)

    // –ï—Å–ª–∏ –ø–æ–∫–∏–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–Ω–∞—Ç—É, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–µ
    const currentActiveRoom = get().activeRoom
    if (currentActiveRoom && currentActiveRoom.id === roomId) {
      set({ activeRoom: null })
    }
  },

  sendMessage: (
    roomId: number,
    content: string,
    messageType = "text",
    replyTo
  ) => {
    console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:", {
      roomId,
      content,
      messageType,
      replyTo,
      socketConnected: socketService.isConnected(),
    })

    if (!socketService.isConnected()) {
      console.error("‚ùå Socket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
      toast.error("–ù–µ—Ç —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
      return
    }

    socketService.sendMessage(roomId, content, messageType, replyTo)
  },

  loadMessages: async (roomId: number, offset = 0, limit = 50) => {
    try {
      const response = await apiService.getRoomMessages(roomId, limit, offset)

      if (response.success && response.data) {
        const messages = response.data.messages

        set((state) => ({
          messages: {
            ...state.messages,
            [roomId]:
              offset === 0
                ? messages
                : [...(state.messages[roomId] || []), ...messages],
          },
        }))
      }
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", error)
      toast.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
    }
  },

  addMessage: (message: Message) => {
    console.log("üì® –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ store:", {
      messageId: message.id,
      roomId: message.room_id,
      content: message.content.substring(0, 50),
      userId: message.user_id,
      timestamp: message.created_at,
    })

    set((state) => {
      const roomMessages = state.messages[message.room_id] || []
      console.log(
        `üìã –¢–µ–∫—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–º–Ω–∞—Ç–µ ${message.room_id}: ${roomMessages.length}`
      )

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const existingMessageIndex = roomMessages.findIndex(
        (m) => m.id === message.id
      )

      let updatedMessages
      if (existingMessageIndex >= 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        updatedMessages = [...roomMessages]
        updatedMessages[existingMessageIndex] = message
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        console.log("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        updatedMessages = [...roomMessages, message]
      }

      console.log(
        `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${updatedMessages.length}`
      )

      return {
        messages: {
          ...state.messages,
          [message.room_id]: updatedMessages,
        },
      }
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –∫–æ–º–Ω–∞—Ç
    set((state) => ({
      rooms: state.rooms.map((room) =>
        room.id === message.room_id
          ? { ...room, lastMessage: message, updated_at: message.created_at }
          : room
      ),
    }))
  },

  updateMessage: (messageId: number, newContent: string, editedAt: Date) => {
    set((state) => {
      const updatedMessages = { ...state.messages }

      // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö
      for (const roomId in updatedMessages) {
        const messages = updatedMessages[roomId]
        const messageIndex = messages.findIndex((m) => m.id === messageId)

        if (messageIndex >= 0) {
          updatedMessages[roomId] = [...messages]
          updatedMessages[roomId][messageIndex] = {
            ...messages[messageIndex],
            content: newContent,
            edited_at: editedAt,
          }
          break
        }
      }

      return { messages: updatedMessages }
    })
  },

  removeMessage: (messageId: number) => {
    set((state) => {
      const updatedMessages = { ...state.messages }

      // –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
      for (const roomId in updatedMessages) {
        const messages = updatedMessages[roomId]
        const filteredMessages = messages.filter((m) => m.id !== messageId)

        if (filteredMessages.length !== messages.length) {
          updatedMessages[roomId] = filteredMessages
          break
        }
      }

      return { messages: updatedMessages }
    })
  },

  setTypingUser: (roomId: number, userId: number, isTyping: boolean) => {
    set((state) => {
      const currentTypingUsers = state.typingUsers[roomId] || []

      let updatedTypingUsers
      if (isTyping) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if (!currentTypingUsers.includes(userId)) {
          updatedTypingUsers = [...currentTypingUsers, userId]
        } else {
          updatedTypingUsers = currentTypingUsers
        }
      } else {
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        updatedTypingUsers = currentTypingUsers.filter((id) => id !== userId)
      }

      return {
        typingUsers: {
          ...state.typingUsers,
          [roomId]: updatedTypingUsers,
        },
      }
    })
  },

  updateRoomParticipants: (roomId: number, participants: User[]) => {
    set((state) => ({
      rooms: state.rooms.map((room) =>
        room.id === roomId
          ? { ...room, participants, participantCount: participants.length }
          : room
      ),
      activeRoom:
        state.activeRoom?.id === roomId
          ? { ...state.activeRoom, participants }
          : state.activeRoom,
    }))
  },

  setLoading: (loading: boolean) => {
    set({ isLoading: loading })
  },

  setError: (error: string | null) => {
    set({ error })
  },

  clearMessages: (roomId: number) => {
    set((state) => ({
      messages: {
        ...state.messages,
        [roomId]: [],
      },
    }))
  },
}))

// –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ listeners —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
let chatListenersSetup = false

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
let currentHandlers: { [key: string]: any } = {}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO —Å–ª—É—à–∞—Ç–µ–ª–µ–π –¥–ª—è —á–∞—Ç–∞
export const setupChatSocketListeners = () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ socket
  if (!socketService.isConnected()) {
    console.warn("Socket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É listeners")
    return
  }

  // –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è listeners
  if (chatListenersSetup) {
    console.log("Chat listeners —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    return
  }

  console.log("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º chat socket listeners...")

  const store = useChatStore.getState()

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
  const handleNewMessage = (message: Message) => {
    console.log("–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message)
    store.addMessage(message)
  }

  const handleMessageEdited = (data: {
    messageId: number
    newContent: string
    editedAt: Date
  }) => {
    console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ:", data)
    store.updateMessage(data.messageId, data.newContent, data.editedAt)
  }

  const handleMessageDeleted = (data: { messageId: number }) => {
    console.log("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ:", data)
    store.removeMessage(data.messageId)
  }

  const handleUserTyping = (data: {
    userId: number
    roomId: number
    isTyping: boolean
  }) => {
    store.setTypingUser(data.roomId, data.userId, data.isTyping)
  }

  const handleJoinedRoom = (data: {
    roomId: number
    messages: Message[]
    participants: User[]
  }) => {
    console.log("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ:", data)
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
    useChatStore.setState((state) => ({
      messages: {
        ...state.messages,
        [data.roomId]: data.messages,
      },
    }))

    store.updateRoomParticipants(data.roomId, data.participants)
  }

  const handleUserJoined = (data: { userId: number; roomId: number }) => {
    console.log(
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.userId} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${data.roomId}`
    )
  }

  const handleUserLeft = (data: { userId: number; roomId: number }) => {
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.userId} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É ${data.roomId}`)
  }

  const handleUserStatusChanged = (data: {
    userId: number
    status: "online" | "offline" | "away"
  }) => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –∫–æ–º–Ω–∞—Ç
    const state = useChatStore.getState()
    const updatedRooms = state.rooms.map((room) => {
      if (room.participants) {
        const updatedParticipants = room.participants.map((participant) =>
          participant.id === data.userId
            ? { ...participant, status: data.status }
            : participant
        )
        return { ...room, participants: updatedParticipants }
      }
      return room
    })

    useChatStore.setState({ rooms: updatedRooms })
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  currentHandlers = {
    handleNewMessage,
    handleMessageEdited,
    handleMessageDeleted,
    handleUserTyping,
    handleJoinedRoom,
    handleUserJoined,
    handleUserLeft,
    handleUserStatusChanged,
  }

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º listeners
  socketService.onMessage(handleNewMessage)
  socketService.on("message_edited", handleMessageEdited)
  socketService.on("message_deleted", handleMessageDeleted)
  socketService.onUserTyping(handleUserTyping)
  socketService.on("joined_room", handleJoinedRoom)
  socketService.onUserJoined(handleUserJoined)
  socketService.onUserLeft(handleUserLeft)
  socketService.onUserStatusChanged(handleUserStatusChanged)

  chatListenersSetup = true
  console.log("‚úÖ Chat socket listeners –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö listeners
export const clearChatSocketListeners = () => {
  if (!chatListenersSetup || !socketService.isConnected()) {
    return
  }

  console.log("üßπ –û—á–∏—â–∞–µ–º chat socket listeners...")

  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  socketService.off("new_message", currentHandlers.handleNewMessage)
  socketService.off("message_edited", currentHandlers.handleMessageEdited)
  socketService.off("message_deleted", currentHandlers.handleMessageDeleted)
  socketService.off("user_typing", currentHandlers.handleUserTyping)
  socketService.off("joined_room", currentHandlers.handleJoinedRoom)
  socketService.off("user_joined_room", currentHandlers.handleUserJoined)
  socketService.off("user_left_room", currentHandlers.handleUserLeft)
  socketService.off(
    "user_status_changed",
    currentHandlers.handleUserStatusChanged
  )

  currentHandlers = {}
  chatListenersSetup = false
  console.log("‚úÖ Chat listeners –æ—á–∏—â–µ–Ω—ã")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ listeners (–ø—Ä–∏ logout)
export const resetChatSocketListeners = () => {
  clearChatSocketListeners()
  console.log("Chat listeners —Å–±—Ä–æ—à–µ–Ω—ã")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è listeners (–ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö)
export const reconnectChatSocketListeners = () => {
  console.log("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º chat socket listeners...")
  clearChatSocketListeners()
  setTimeout(() => {
    setupChatSocketListeners()
  }, 100)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è listeners
export const areChatListenersSetup = () => {
  return chatListenersSetup
}
