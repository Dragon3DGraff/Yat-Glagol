import { create } from "zustand"
import { FriendsState, Friend, FriendRequest, FriendshipStatus } from "@/types"
import { apiService } from "@/services/api"
import { socketService } from "@/services/socket"
import toast from "react-hot-toast"

interface FriendsStore extends FriendsState {
  // Actions
  loadFriends: () => Promise<void>
  loadFriendRequests: () => Promise<void>
  loadSentRequests: () => Promise<void>
  sendFriendRequest: (userId: number, message?: string) => Promise<boolean>
  sendFriendRequestByUsername: (
    username: string,
    message?: string
  ) => Promise<boolean>
  acceptFriendRequest: (requestId: number) => Promise<boolean>
  declineFriendRequest: (requestId: number) => Promise<boolean>
  removeFriend: (friendId: number) => Promise<boolean>
  blockUser: (userId: number) => Promise<boolean>
  unblockUser: (userId: number) => Promise<boolean>
  getFriendshipStatus: (userId: number) => Promise<FriendshipStatus>

  // Internal actions
  addFriend: (friend: Friend) => void
  removeFriendFromStore: (friendId: number) => void
  addFriendRequest: (request: FriendRequest) => void
  addSentRequest: (request: FriendRequest) => void
  removeFriendRequest: (requestId: number) => void
  updateFriendRequest: (
    requestId: number,
    status: FriendRequest["status"]
  ) => void
  setLoading: (loading: boolean) => void
  setError: (error: string | null) => void
  clearError: () => void
}

export const useFriendsStore = create<FriendsStore>((set, get) => ({
  // Initial state
  friends: [],
  friendRequests: [],
  sentRequests: [],
  isLoading: false,
  error: null,

  // Actions
  loadFriends: async () => {
    console.log(`üë• [LOAD] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π`)
    set({ isLoading: true, error: null })

    try {
      const response = await apiService.getFriends()
      console.log(`üë• [LOAD] –û—Ç–≤–µ—Ç API –¥–ª—è –¥—Ä—É–∑–µ–π:`, response)

      if (response.success && response.data && response.data.friends) {
        console.log(
          `‚úÖ [LOAD] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${response.data.friends.length} –¥—Ä—É–∑–µ–π`
        )

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ API
        const friendIds = response.data.friends.map((f) => f.id)
        const uniqueIds = new Set(friendIds)
        if (friendIds.length !== uniqueIds.size) {
          console.warn(
            `‚ö†Ô∏è [LOAD] –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –æ—Ç–≤–µ—Ç–µ API! –í—Å–µ–≥–æ: ${friendIds.length}, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: ${uniqueIds.size}`
          )
        }

        set({
          friends: response.data.friends,
          isLoading: false,
          error: null,
        })
      } else {
        console.error(`‚ùå [LOAD] –û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥—Ä—É–∑–µ–π:`, response)
        set({
          isLoading: false,
          error: response.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–∑–µ–π",
          friends: [], // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        })
        toast.error(response.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–∑–µ–π")
      }
    } catch (error: any) {
      const errorMessage =
        error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥—Ä—É–∑–µ–π"
      console.error(`üí• [LOAD] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥—Ä—É–∑–µ–π:`, error)
      set({
        isLoading: false,
        error: errorMessage,
        friends: [], // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      })
      toast.error(errorMessage)
    }
  },

  loadFriendRequests: async () => {
    console.log(`üì• [LOAD] –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã`)
    set({ isLoading: true, error: null })

    try {
      const response = await apiService.getFriendRequests()
      console.log(`üì• [LOAD] –û—Ç–≤–µ—Ç API –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:`, response)

      if (response.success && response.data && response.data.requests) {
        console.log(
          `‚úÖ [LOAD] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${response.data.requests.length} –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤`
        )
        set({
          friendRequests: response.data.requests,
          isLoading: false,
          error: null,
        })
      } else {
        console.error(
          `‚ùå [LOAD] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:`,
          response.error ||
            "response.data –∏–ª–∏ response.data.requests –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        )
        console.error(`‚ùå [LOAD] –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:`, response)
        set({
          isLoading: false,
          error: response.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤",
          friendRequests: [], // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        })
      }
    } catch (error: any) {
      const errorMessage =
        error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤"
      console.error(
        `üí• [LOAD] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:`,
        error
      )
      set({
        isLoading: false,
        error: errorMessage,
      })
    }
  },

  loadSentRequests: async () => {
    console.log(`üì§ [LOAD] –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã`)
    try {
      const response = await apiService.getSentFriendRequests()
      console.log(`üì§ [LOAD] –û—Ç–≤–µ—Ç API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:`, response)

      if (response.success && response.data && response.data.requests) {
        console.log(
          `‚úÖ [LOAD] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${response.data.requests.length} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤`
        )
        set({
          sentRequests: response.data.requests,
          error: null,
        })
      } else {
        console.error(
          `‚ùå [LOAD] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:`,
          response.error ||
            "response.data –∏–ª–∏ response.data.requests –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        )
        console.error(
          `‚ùå [LOAD] –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö:`,
          response
        )
        set({
          sentRequests: [], // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
          error: response.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
        })
      }
    } catch (error: any) {
      console.error(
        "üí• [LOAD] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:",
        error
      )
    }
  },

  sendFriendRequest: async (userId: number, message?: string) => {
    set({ isLoading: true, error: null })

    try {
      const response = await apiService.sendFriendRequest(userId, message)

      if (response.success) {
        set({ isLoading: false })
        toast.success("–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        await get().loadSentRequests()
        return true
      } else {
        set({
          isLoading: false,
          error: response.error || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
        })
        toast.error(response.error || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
        return false
      }
    } catch (error: any) {
      const errorMessage =
        error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
      set({
        isLoading: false,
        error: errorMessage,
      })
      toast.error(errorMessage)
      return false
    }
  },

  sendFriendRequestByUsername: async (username: string, message?: string) => {
    console.log(
      `üöÄ [API] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${username}`
    )
    set({ isLoading: true, error: null })

    try {
      const response = await apiService.sendFriendRequestByUsername(
        username,
        message
      )

      console.log(`üì° [API] –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, response)

      if (response.success) {
        console.log(
          `‚úÖ [API] –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, ID: ${response.data?.requestId}`
        )
        set({ isLoading: false })
        toast.success(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${username}`)
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        console.log(`üîÑ [API] –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã`)
        await get().loadSentRequests()
        return true
      } else {
        console.error(`‚ùå [API] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:`, response.error)
        set({
          isLoading: false,
          error: response.error || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
        })
        toast.error(response.error || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
        return false
      }
    } catch (error: any) {
      const errorMessage =
        error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
      console.error(`üí• [API] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:`, error)
      set({
        isLoading: false,
        error: errorMessage,
      })
      toast.error(errorMessage)
      return false
    }
  },

  acceptFriendRequest: async (requestId: number) => {
    set({ isLoading: true, error: null })

    try {
      const response = await apiService.acceptFriendRequest(requestId)

      if (response.success && response.data) {
        // –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞
        set((state) => ({
          friendRequests: state.friendRequests.filter(
            (req) => req.id !== requestId
          ),
          isLoading: false,
          error: null,
        }))

        toast.success("–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –ø—Ä–∏–Ω—è—Ç")

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
        await get().loadFriends()

        return true
      } else {
        set({
          isLoading: false,
          error: response.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞",
        })
        toast.error(response.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞")
        return false
      }
    } catch (error: any) {
      const errorMessage =
        error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞"
      set({
        isLoading: false,
        error: errorMessage,
      })
      toast.error(errorMessage)
      return false
    }
  },

  declineFriendRequest: async (requestId: number) => {
    set({ isLoading: true, error: null })

    try {
      const response = await apiService.declineFriendRequest(requestId)

      if (response.success) {
        // –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞
        set((state) => ({
          friendRequests: state.friendRequests.filter(
            (req) => req.id !== requestId
          ),
          isLoading: false,
          error: null,
        }))

        toast.success("–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        return true
      } else {
        set({
          isLoading: false,
          error: response.error || "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞",
        })
        toast.error(response.error || "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞")
        return false
      }
    } catch (error: any) {
      const errorMessage =
        error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞"
      set({
        isLoading: false,
        error: errorMessage,
      })
      toast.error(errorMessage)
      return false
    }
  },

  removeFriend: async (friendId: number) => {
    set({ isLoading: true, error: null })

    try {
      const response = await apiService.removeFriend(friendId)

      if (response.success) {
        // –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        set((state) => ({
          friends: state.friends.filter(
            (friend) => friend.friendId !== friendId
          ),
          isLoading: false,
          error: null,
        }))

        toast.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –¥—Ä—É–∑–µ–π")
        return true
      } else {
        set({
          isLoading: false,
          error: response.error || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –¥—Ä—É–∑–µ–π",
        })
        toast.error(response.error || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –¥—Ä—É–∑–µ–π")
        return false
      }
    } catch (error: any) {
      const errorMessage =
        error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –¥—Ä—É–∑–µ–π"
      set({
        isLoading: false,
        error: errorMessage,
      })
      toast.error(errorMessage)
      return false
    }
  },

  blockUser: async (userId: number) => {
    set({ isLoading: true, error: null })

    try {
      const response = await apiService.blockUser(userId)

      if (response.success) {
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥—Ä—É–∑–µ–π, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –¥—Ä—É–≥–æ–º
        set((state) => ({
          friends: state.friends.filter((friend) => friend.friendId !== userId),
          isLoading: false,
          error: null,
        }))

        toast.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        return true
      } else {
        set({
          isLoading: false,
          error: response.error || "–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        })
        toast.error(response.error || "–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return false
      }
    } catch (error: any) {
      const errorMessage =
        error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
      set({
        isLoading: false,
        error: errorMessage,
      })
      toast.error(errorMessage)
      return false
    }
  },

  unblockUser: async (userId: number) => {
    set({ isLoading: true, error: null })

    try {
      const response = await apiService.unblockUser(userId)

      if (response.success) {
        set({
          isLoading: false,
          error: null,
        })

        toast.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        return true
      } else {
        set({
          isLoading: false,
          error: response.error || "–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        })
        toast.error(response.error || "–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return false
      }
    } catch (error: any) {
      const errorMessage =
        error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
      set({
        isLoading: false,
        error: errorMessage,
      })
      toast.error(errorMessage)
      return false
    }
  },

  getFriendshipStatus: async (userId: number) => {
    try {
      const response = await apiService.getFriendshipStatus(userId)

      if (response.success && response.data) {
        return response.data.status
      } else {
        return "none"
      }
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π:", error)
      return "none"
    }
  },

  // Internal actions
  addFriend: (friend: Friend) => {
    set((state) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –¥—Ä—É–≥–∞ –≤ —Å–ø–∏—Å–∫–µ (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
      const existingFriend = state.friends.find(
        (f) => f.id === friend.id || f.friendId === friend.friendId
      )

      if (existingFriend) {
        console.log(`‚ö†Ô∏è [STORE] –î—Ä—É–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ:`, friend.friendId)
        return state // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
      }

      console.log(`‚ûï [STORE] –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞:`, friend.friendId)
      return {
        friends: [...state.friends, friend],
      }
    })
  },

  removeFriendFromStore: (friendId: number) => {
    set((state) => ({
      friends: state.friends.filter((friend) => friend.friendId !== friendId),
    }))
  },

  addFriendRequest: (request: FriendRequest) => {
    set((state) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–ø–∏—Å–∫–µ (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
      const existingRequest = state.friendRequests.find(
        (r) => r.id === request.id
      )

      if (existingRequest) {
        console.log(`‚ö†Ô∏è [STORE] –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:`, request.id)
        return state // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
      }

      console.log(`üì• [STORE] –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å:`, request.id)
      return {
        friendRequests: [...state.friendRequests, request],
      }
    })
  },

  addSentRequest: (request: FriendRequest) => {
    set((state) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–ø–∏—Å–∫–µ (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
      const existingRequest = state.sentRequests.find(
        (r) => r.id === request.id
      )

      if (existingRequest) {
        console.log(
          `‚ö†Ô∏è [STORE] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:`,
          request.id
        )
        return state // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
      }

      console.log(`üì§ [STORE] –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:`, request.id)
      return {
        sentRequests: [...state.sentRequests, request],
      }
    })
  },

  removeFriendRequest: (requestId: number) => {
    set((state) => ({
      friendRequests: state.friendRequests.filter(
        (req) => req.id !== requestId
      ),
    }))
  },

  updateFriendRequest: (requestId: number, status: FriendRequest["status"]) => {
    set((state) => ({
      friendRequests: state.friendRequests.map((req) =>
        req.id === requestId ? { ...req, status } : req
      ),
    }))
  },

  setLoading: (loading: boolean) => {
    set({ isLoading: loading })
  },

  setError: (error: string | null) => {
    set({ error })
  },

  clearError: () => {
    set({ error: null })
  },
}))

// –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ listeners —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
let friendsListenersSetup = false

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
let currentHandlers: { [key: string]: any } = {}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO —Å–ª—É—à–∞—Ç–µ–ª–µ–π –¥–ª—è –¥—Ä—É–∑–µ–π
export const setupFriendsSocketListeners = () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ socket
  if (!socketService.isConnected()) {
    console.warn("Socket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É friends listeners")
    return
  }

  // –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è listeners
  if (friendsListenersSetup) {
    console.log("Friends listeners —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    return
  }

  console.log("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º friends socket listeners...")

  const store = useFriendsStore.getState()

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥—Ä—É–∂–±—É
  const handleFriendRequestReceived = (data: {
    request: FriendRequest
    fromUser: any
  }) => {
    console.log("üéâ [SOCKET] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É:", data)
    if (data.request) {
      console.log("üîÑ [SOCKET] –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
      // –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      store.loadFriendRequests()

      toast.success(
        `${
          data.fromUser?.username || data.request.fromUser?.username
        } –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É`
      )
    } else {
      console.warn("‚ö†Ô∏è [SOCKET] –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É")
    }
  }

  const handleFriendRequestSent = (data: {
    request: FriendRequest
    toUser: any
  }) => {
    console.log("üì§ [SOCKET] –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:", data)
    if (data.request) {
      console.log("üîÑ [SOCKET] –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
      // –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      store.loadSentRequests()
    } else {
      console.warn("‚ö†Ô∏è [SOCKET] –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
    }
  }

  const handleFriendRequestAccepted = (data: {
    requestId: number
    friendship: Friend
    newRoomId?: number
  }) => {
    console.log("‚úÖ [SOCKET] –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –ø—Ä–∏–Ω—è—Ç:", data)
    console.log("üîÑ [SOCKET] –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –¥—Ä—É–∑–µ–π –∏ –∑–∞–ø—Ä–æ—Å–æ–≤")

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∏–∑ API (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
    console.log("‚è≥ [SOCKET] –û–∂–∏–¥–∞–Ω–∏–µ 100ms –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π...")
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å race condition —Å –¥—Ä—É–≥–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    setTimeout(() => {
      store.loadFriends()
    }, 100)

    // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    useFriendsStore.setState((state) => ({
      sentRequests: state.sentRequests.filter(
        (req) => req.id !== data.requestId
      ),
    }))

    toast.success("–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –±—ã–ª –ø—Ä–∏–Ω—è—Ç")
  }

  const handleFriendRequestDeclined = (data: { requestId: number }) => {
    console.log("–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –æ—Ç–∫–ª–æ–Ω–µ–Ω:", data)
    // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    useFriendsStore.setState((state) => ({
      sentRequests: state.sentRequests.filter(
        (req) => req.id !== data.requestId
      ),
    }))
    toast("–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω")
  }

  const handleFriendRemoved = (data: { friendId: number; roomId?: number }) => {
    console.log("–î—Ä—É–≥ —É–¥–∞–ª–µ–Ω:", data)
    store.removeFriendFromStore(data.friendId)
    toast("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –≤–∞—Å –∏–∑ –¥—Ä—É–∑–µ–π")
  }

  const handleUserBlocked = (data: { userId: number }) => {
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:", data)
    store.removeFriendFromStore(data.userId)
  }

  const handleUserUnblocked = (data: { userId: number }) => {
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:", data)
    // –û—Å–æ–±–æ–π –ª–æ–≥–∏–∫–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  currentHandlers = {
    handleFriendRequestReceived,
    handleFriendRequestSent,
    handleFriendRequestAccepted,
    handleFriendRequestDeclined,
    handleFriendRemoved,
    handleUserBlocked,
    handleUserUnblocked,
  }

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º listeners
  socketService.on("friend_request_received", handleFriendRequestReceived)
  socketService.on("friend_request_sent", handleFriendRequestSent)
  socketService.on("friend_request_accepted", handleFriendRequestAccepted)
  socketService.on("friend_request_declined", handleFriendRequestDeclined)
  socketService.on("friend_removed", handleFriendRemoved)
  socketService.on("user_blocked", handleUserBlocked)
  socketService.on("user_unblocked", handleUserUnblocked)

  friendsListenersSetup = true
  console.log("‚úÖ Friends socket listeners –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö listeners
export const clearFriendsSocketListeners = () => {
  if (!friendsListenersSetup || !socketService.isConnected()) {
    return
  }

  console.log("üßπ –û—á–∏—â–∞–µ–º friends socket listeners...")

  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  socketService.off(
    "friend_request_received",
    currentHandlers.handleFriendRequestReceived
  )
  socketService.off(
    "friend_request_sent",
    currentHandlers.handleFriendRequestSent
  )
  socketService.off(
    "friend_request_accepted",
    currentHandlers.handleFriendRequestAccepted
  )
  socketService.off(
    "friend_request_declined",
    currentHandlers.handleFriendRequestDeclined
  )
  socketService.off("friend_removed", currentHandlers.handleFriendRemoved)
  socketService.off("user_blocked", currentHandlers.handleUserBlocked)
  socketService.off("user_unblocked", currentHandlers.handleUserUnblocked)

  currentHandlers = {}
  friendsListenersSetup = false
  console.log("‚úÖ Friends listeners –æ—á–∏—â–µ–Ω—ã")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ listeners (–ø—Ä–∏ logout)
export const resetFriendsSocketListeners = () => {
  clearFriendsSocketListeners()
  console.log("Friends listeners —Å–±—Ä–æ—à–µ–Ω—ã")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è listeners (–ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö)
export const reconnectFriendsSocketListeners = () => {
  console.log("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º friends socket listeners...")
  clearFriendsSocketListeners()
  setTimeout(() => {
    setupFriendsSocketListeners()
  }, 100)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è listeners
export const areFriendsListenersSetup = () => {
  return friendsListenersSetup
}
